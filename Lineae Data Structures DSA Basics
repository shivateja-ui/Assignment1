#Write a program to find all pairs of an integer array whose sum is equal to a given number?
def find(array, len, summ):
    print("Pairs whose sum is : ", summ)
    for i in range(len):
        for j in range(i, len):
            if (array[i] + array[j]) == summ:
                print(array[i], array[j])
array = [5, 2, 3, 4, 1, 6, 7]
summ = int(input("Enter the sum of inputs:"))
print("Array= ", array)
find(array, len(array), summ)

#Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.
def reverseList(A, start, end):
  while start < end:
    A[start], A[end] = A[end], A[start]
    start += 1
    end -= 1
A = [10, 20, 30, 40, 50]
reverseList(A, 0, 4)
print(A)

#Write a program to check if two strings are a rotation of each other?
def checkString(s1, s2, indexFound, Size):
    for i in range(Size):
        if(s1[i] != s2[(indexFound + i) % Size]):
            return False
    return True
s1 = input("enter the string:")
s2 = input("enter the rotational string")
if(len(s1) != len(s2)):
    print("s2 is not a rotation on s1")
else:
    indexes = []  # store occurrences of the first character of s1
    Size = len(s1)
    firstChar = s1[0]
    for i in range(Size):
        if(s2[i] == firstChar):
            indexes.append(i)
    isRotation = False
    for idx in indexes:
        isRotation = checkString(s1, s2, idx, Size)
        if(isRotation):
            break
    if(isRotation):
        print("Strings are rotations of each other")
    else:
        print("Strings are not rotations of each other")

#Write a program to print the first non-repeated character from a string?
myStr = input("enter the string:")
while myStr != "":
    slen0 = len(myStr)
    ch = myStr[0]
    myStr = myStr.replace(ch, "")
    slen1 = len(myStr)
    if slen1 == slen0-1:
        print ("First non-repeating character = ",ch)
        break;
    else:
        print ("No Unique Character Found!")

#Read about the Tower of Hanoi algorithm. Write a program to implement it.
def TowerOfHanoi(n, from_rod, to_rod, aux_rod):
    if n == 0:
        return
    TowerOfHanoi(n-1, from_rod, aux_rod, to_rod)
    print("Move disk", n, "from rod", from_rod, "to rod", to_rod)
    TowerOfHanoi(n-1, aux_rod, to_rod, from_rod)
N = int(input("Enter the number:"))
TowerOfHanoi(N, 'A', 'C', 'B')

#Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.
def isOperator(x):
    if x == "+":
        return True
    if x == "-":
        return True
    if x == "/":
        return True
    if x == "*":
        return True
    return False
def postToPre(post_exp):
    s = []
    length = len(post_exp)
    for i in range(length):
        if (isOperator(post_exp[i])):
            op1 = s[-1]
            s.pop()
            op2 = s[-1]
            s.pop()
            temp = post_exp[i] + op2 + op1
            s.append(temp)
        else:
            s.append(post_exp[i])
    ans = ""
    for i in s:
        ans += i
    return ans
if __name__ == "__main__":
    post_exp = input("enter the postfix string:")
    print("Prefix : ", postToPre(post_exp))

#Write a program to convert prefix expression to infix expression
def prefixToInfix(prefix):
    stack = []
    i = len(prefix) - 1
    while i >= 0:
        if not isOperator(prefix[i]):
            stack.append(prefix[i])
            i -= 1
        else:
            str = "(" + stack.pop() + prefix[i] + stack.pop() + ")"
            stack.append(str)
            i -= 1
    return stack.pop()
def isOperator(c):
    if c == "*" or c == "+" or c == "-" or c == "/" or c == "^" or c == "(" or c == ")":
        return True
    else:
        return False
if __name__=="__main__":
    str = input("enter the prefix string:")
    print("Infix string:",prefixToInfix(str))

#Write a program to check if all the brackets are closed in a given code snippet.
open_list = ["[","{","("]
close_list = ["]","}",")"]
def check(myStr):
    stack = []
    for i in myStr:
        if i in open_list:
            stack.append(i)
        elif i in close_list:
            pos = close_list.index(i)
            if ((len(stack) > 0) and
                (open_list[pos] == stack[len(stack)-1])):
                stack.pop()
            else:
                return "Unbalanced"
    if len(stack) == 0:
        return "Balanced"
    else:
        return "Unbalanced"
string = "{[]{()}}"
print(string,"-", check(string))
string = "[{}{})(]"
print(string,"-", check(string))
string = "((()"
print(string,"-",check(string))

#Write a program to reverse a stack.
class Stack:
    def __init__(self):
        self.Elements = []
    def push(self, value):
        self.Elements.append(value)
    def pop(self):
        return self.Elements.pop()
    def empty(self):
        return self.Elements == []
    def show(self):
        for value in reversed(self.Elements):
            print(value)
def BottomInsert(s, value):
    if s.empty():
        s.push(value)
    else:
        popped = s.pop()
        BottomInsert(s, value)
        s.push(popped)
def Reverse(s):
    if s.empty():
        pass
    else:
        popped = s.pop()
        Reverse(s)
        BottomInsert(s, popped)
stk = Stack()
stk.push(1)
stk.push(2)
stk.push(3)
stk.push(4)
stk.push(5)
print("Original Stack")
stk.show()
print("\nStack after Reversing")
Reverse(stk)
stk.show()

#Write a program to find the smallest number using a stack.
class MinStack(object):
    min=float('inf')
    def __init__(self):
        self.min=float('inf')
        self.stack = []
    def push(self, x):
        if x<=self.min:
            self.stack.append(self.min)
            self.min = x
        self.stack.append(x)
    def pop(self):
        t = self.stack[-1]
        self.stack.pop()
        if self.min == t:
            self.min = self.stack[-1]
            self.stack.pop()
    def top(self):
        return self.stack[-1]
    def getMin(self):
        return self.min
m = MinStack()
m.push(-2)
m.push(0)
m.push(-3)
print(m.getMin())
m.pop()
print(m.top())
print(m.getMin())